#!/usr/bin/env python3
"""
M√≥dulo de instala√ß√£o do Portainer
Baseado no SetupOrionOriginal.sh - linhas 3774-3870
"""

import subprocess
import os
import time
from .base_setup import BaseSetup
from utils.template_engine import TemplateEngine
from utils.cloudflare_api import get_cloudflare_api
from utils.config_manager import ConfigManager

class PortainerSetup(BaseSetup):
    """Instala√ß√£o e configura√ß√£o do Portainer"""
    
    def __init__(self, domain: str = None, network_name: str = None, config_manager: ConfigManager = None):
        super().__init__("Instala√ß√£o do Portainer")
        self.domain = domain
        self.network_name = network_name
        self.config = config_manager or ConfigManager()
        
    def validate_prerequisites(self) -> bool:
        """Valida pr√©-requisitos"""
        if not self.check_root():
            return False
            
        # Solicita dom√≠nio interativamente se n√£o fornecido
        if not self.domain:
            self.domain = self._get_domain_input()
            if not self.domain:
                self.logger.error("Dom√≠nio do Portainer √© obrigat√≥rio")
                return False
            
        # Verifica se Docker est√° instalado
        if not self.is_docker_running():
            self.logger.error("Docker n√£o est√° rodando")
            return False
            
        # Verifica se Docker Swarm est√° ativo
        if not self.is_swarm_active():
            self.logger.error("Docker Swarm n√£o est√° ativo")
            return False
        # Exige nome da rede
        if not self.network_name:
            self.logger.error("Nome da rede Docker √© obrigat√≥rio. Forne√ßa via par√¢metro 'network_name'.")
            return False
            
        return True

    def setup_dns_record(self) -> bool:
        """Cria ou garante registro DNS A para o dom√≠nio do Portainer no Cloudflare."""
        try:
            self.logger.info("üåê Configurando DNS do Portainer no Cloudflare (registro A)...")
            cf = get_cloudflare_api(self.logger, self.config)
            if not cf:
                self.logger.error("‚ùå API Cloudflare n√£o configurada")
                return False
            
            comment = "Portainer"
            # ip=None faz com que ensure_a_record detecte o IP p√∫blico automaticamente
            # proxied=False => DNS Only (sem proxy da Cloudflare)
            if cf.ensure_a_record(self.domain, ip=None, proxied=False, comment=comment):
                self.logger.info(f"‚úÖ Registro A garantido para {self.domain} (coment√°rio: {comment})")
                return True
            
            self.logger.error(f"‚ùå Falha ao garantir registro A para {self.domain}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao configurar DNS do Portainer: {e}")
            return False
    
    def _get_domain_input(self) -> str:
        """Solicita dom√≠nio do usu√°rio interativamente com sugest√£o inteligente"""
        print(f"\nüê≥ CONFIGURA√á√ÉO PORTAINER")
        print("‚îÄ" * 30)
        
        # Gera sugest√£o baseada na configura√ß√£o DNS
        suggested_domain = self.config.suggest_domain("ptn")
        
        while True:
            if suggested_domain:
                prompt = f"Dom√≠nio do Portainer (Enter para '{suggested_domain}' ou digite outro)"
            else:
                prompt = "Digite o dom√≠nio para o Portainer (ex: ptn.seudominio.com)"
                
            domain = input(f"{prompt}: ").strip()
            
            # Se n√£o digitou nada e tem sugest√£o, usa a sugest√£o
            if not domain and suggested_domain:
                return suggested_domain
            
            # Valida dom√≠nio
            if domain and '.' in domain:
                return domain
            else:
                print("‚ùå Dom√≠nio inv√°lido! Digite um dom√≠nio v√°lido.")
    
    def is_docker_running(self) -> bool:
        """Verifica se Docker est√° rodando"""
        try:
            result = subprocess.run(
                "docker info",
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0
        except Exception as e:
            self.logger.debug(f"Erro ao verificar Docker: {e}")
            return False
    
    def is_swarm_active(self) -> bool:
        """Verifica se Docker Swarm est√° ativo"""
        try:
            result = subprocess.run(
                "docker info --format '{{.Swarm.LocalNodeState}}'",
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0 and "active" in result.stdout.strip()
        except Exception as e:
            self.logger.debug(f"Erro ao verificar Swarm: {e}")
            return False
    
    def create_network(self) -> bool:
        """Cria a rede overlay para o Portainer"""
        # Verifica se a rede j√° existe
        try:
            result = subprocess.run(
                f"docker network ls --filter name={self.network_name} --format '{{{{.Name}}}}'",
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            if result.returncode == 0 and self.network_name in result.stdout:
                self.logger.info(f"Rede {self.network_name} j√° existe")
                return True
        except Exception as e:
            self.logger.debug(f"Erro ao verificar rede: {e}")
        
        # Cria a rede
        return self.run_command(
            f"docker network create --driver=overlay {self.network_name}",
            f"cria√ß√£o da rede {self.network_name}"
        )
    
    def create_volume(self) -> bool:
        """Cria o volume para dados do Portainer"""
        # Verifica se o volume j√° existe
        try:
            result = subprocess.run(
                "docker volume ls --filter name=portainer_data --format '{{.Name}}'",
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            if result.returncode == 0 and "portainer_data" in result.stdout:
                self.logger.info("Volume portainer_data j√° existe")
                return True
        except Exception as e:
            self.logger.debug(f"Erro ao verificar volume: {e}")
        
        # Cria o volume
        return self.run_command(
            "docker volume create portainer_data",
            "cria√ß√£o do volume portainer_data"
        )
    
    def create_portainer_stack(self) -> bool:
        """Cria o arquivo docker-compose do Portainer usando template"""
        try:
            # Inicializa template engine
            template_engine = TemplateEngine()
            
            # Vari√°veis para o template
            template_vars = {
                'network_name': self.network_name,
                'portainer_domain': self.domain,
                'auth_middleware': None  # Pode ser configurado futuramente
            }
            
            # Renderiza template para arquivo
            stack_file = "/tmp/portainer-stack.yml"
            if not template_engine.render_to_file(
                'docker-compose/portainer.yaml.j2', 
                template_vars, 
                stack_file
            ):
                self.logger.error("Falha ao renderizar template do Portainer")
                return False
            
            self.logger.info(f"Stack do Portainer criada: {stack_file}")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro ao criar stack do Portainer: {e}")
            return False
    
    def deploy_portainer_stack(self) -> bool:
        """Faz o deploy da stack do Portainer"""
        return self.run_command(
            "docker stack deploy --prune --resolve-image always -c /tmp/portainer-stack.yml portainer",
            "deploy da stack do Portainer",
            timeout=120
        )
    
    def wait_for_portainer(self, timeout: int = 300) -> bool:
        """Aguarda o Portainer ficar online"""
        self.logger.info(f"Aguardando Portainer ficar online (timeout: {timeout}s)")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                # Verifica se o servi√ßo est√° rodando
                result = subprocess.run(
                    "docker service ls --filter name=portainer_portainer --format '{{.Replicas}}'",
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0 and "1/1" in result.stdout:
                    self.logger.info("Portainer est√° online")
                    return True
                    
                self.logger.debug("Portainer ainda n√£o est√° pronto, aguardando...")
                time.sleep(10)
                
            except Exception as e:
                self.logger.debug(f"Erro ao verificar status do Portainer: {e}")
                time.sleep(10)
        
        self.logger.error("Timeout aguardando Portainer ficar online")
        return False
    
    def verify_installation(self) -> bool:
        """Verifica se a instala√ß√£o foi bem-sucedida"""
        # Verifica se a stack foi criada
        try:
            result = subprocess.run(
                "docker stack ls --format '{{.Name}}'",
                shell=True,
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0 and "portainer" in result.stdout:
                self.logger.info("Stack do Portainer encontrada")
                return True
            else:
                self.logger.error("Stack do Portainer n√£o encontrada")
                return False
                
        except Exception as e:
            self.logger.error(f"Erro ao verificar instala√ß√£o: {e}")
            return False
    
    def run(self) -> bool:
        """Executa a instala√ß√£o completa do Portainer"""
        self.log_step_start("Instala√ß√£o do Portainer")
        
        if not self.validate_prerequisites():
            return False
        
        # Configura/garante DNS A no Cloudflare apontando para o IP p√∫blico
        if not self.setup_dns_record():
            return False
        
        # Cria a rede overlay
        if not self.create_network():
            return False
        
        # Cria o volume
        if not self.create_volume():
            return False
        
        # Cria o arquivo da stack
        if not self.create_portainer_stack():
            return False
        
        # Faz o deploy da stack
        if not self.deploy_portainer_stack():
            return False
        
        # Aguarda o Portainer ficar online
        if not self.wait_for_portainer():
            self.logger.warning("Portainer pode n√£o estar totalmente online, mas foi instalado")
        
        # Verifica instala√ß√£o
        if not self.verify_installation():
            return False
        
        # Salva configura√ß√µes do Portainer no ConfigManager
        self.config.save_app_config("portainer", {
            "domain": self.domain,
            "url": f"https://{self.domain}",
            "network_name": self.network_name,
            "installed": True,
            "installation_method": "auto"
        })
        
        duration = self.get_duration()
        self.logger.info(f"Instala√ß√£o do Portainer conclu√≠da ({duration:.2f}s)")
        
        # Sugere credenciais que o usu√°rio deve usar
        suggested_credentials = self._suggest_portainer_credentials()
        if not suggested_credentials:
            self.logger.error("‚ùå Erro ao gerar credenciais sugeridas.")
            return False
        
        # Sess√£o de destaque de sucesso com as credenciais sugeridas
        self._show_success_summary_with_suggested_credentials(suggested_credentials)
        
        # Confirma se o usu√°rio criou a conta com as credenciais sugeridas
        if not self._confirm_account_creation_with_suggested_credentials(suggested_credentials):
            self.logger.error("‚ùå Cria√ß√£o da conta n√£o confirmada. Configure manualmente antes de continuar.")
            return False
        
        self.logger.info(f"‚úÖ Acesso ao Portainer confirmado!")
        self.logger.info(f"Configura√ß√£o salva no ConfigManager: {self.domain}")
        self.log_step_complete("Instala√ß√£o do Portainer")
        
        return True
    
    def _suggest_portainer_credentials(self) -> dict:
        """Sugere credenciais para o Portainer (email padr√£o + senha gerada)"""
        # Obt√©m email padr√£o ou pergunta
        default_email = self.config.get_user_email()
        if not default_email:
            print(f"\nüìß EMAIL PADR√ÉO NECESS√ÅRIO")
            print("‚îÄ" * 30)
            default_email = input("Digite seu email para usar como padr√£o: ").strip()
            if default_email:
                self.config.set_user_email(default_email)
        
        # Gera senha segura de 64 caracteres
        suggested_password = self.config.generate_secure_password(64)
        
        return {
            "username": default_email,
            "password": suggested_password
        }
    
    def _show_success_summary_with_suggested_credentials(self, credentials: dict):
        """Exibe sess√£o de sucesso com credenciais que o usu√°rio DEVE usar"""
        print(f"\n" + "=" * 70)
        print(f"üéâ PORTAINER INSTALADO COM SUCESSO!")
        print(f"=" * 70)
        print(f"")
        print(f"üåê URL de Acesso: https://{self.domain}")
        print(f"")
        print(f"üë§ CREDENCIAIS PARA CRIAR A CONTA ADMINISTRADOR:")
        print(f"   ‚Ä¢ Email/Usu√°rio: {credentials['username']}")
        print(f"   ‚Ä¢ Senha: {credentials['password']}")
        print(f"")
        print(f"üìù INSTRU√á√ïES:")
        print(f"   1. Acesse https://{self.domain}")
        print(f"   2. Crie o primeiro usu√°rio com os dados EXATOS acima")
        print(f"   3. Use EXATAMENTE o email e senha mostrados")
        print(f"   4. Confirme que conseguiu fazer login")
        print(f"")
        print(f"‚ö†Ô∏è  IMPORTANTE: Use exatamente esses dados para a automa√ß√£o funcionar!")
        print(f"=" * 70)
        print(f"")
    
    def _confirm_account_creation_with_suggested_credentials(self, credentials: dict) -> bool:
        """Confirma se o usu√°rio criou a conta com as credenciais sugeridas"""
        while True:
            print(f"üîç CONFIRMA√á√ÉO DE CRIA√á√ÉO DA CONTA")
            print(f"‚îÄ" * 40)
            print(f"")
            print(f"Confirme que voc√™:")
            print(f"‚úì Acessou https://{self.domain}")
            print(f"‚úì Criou conta com email: {credentials['username']}")
            print(f"‚úì Usou a senha exata mostrada acima")
            print(f"‚úì Conseguiu fazer login normalmente")
            print(f"")
            
            resposta = input("Voc√™ criou a conta com os dados exatos mostrados? (s/n): ").strip().lower()
            
            if resposta in ['s', 'sim', 'y', 'yes']:
                # Salva as credenciais no ConfigManager
                self.config.save_app_credentials("portainer", {
                    "url": f"https://{self.domain}",
                    "username": credentials['username'],
                    "password": credentials['password']
                })
                print(f"‚úÖ Credenciais confirmadas e salvas!")
                return True
            elif resposta in ['n', 'nao', 'n√£o', 'no']:
                print(f"\n‚ùå Conta n√£o criada com as credenciais corretas.")
                print(f"üîß Voc√™ DEVE usar exatamente:")
                print(f"   ‚Ä¢ Email: {credentials['username']}")
                print(f"   ‚Ä¢ Senha: {credentials['password']}")
                print(f"")
                print(f"üîÑ Tente novamente ou cancele a instala√ß√£o.")
                retry = input("Tentar novamente? (s/n): ").strip().lower()
                if retry not in ['s', 'sim', 'y', 'yes']:
                    return False
                continue
            else:
                print("‚ùå Responda com 's' (sim) ou 'n' (n√£o)")
                continue
    

def main():
    """Fun√ß√£o principal para teste do m√≥dulo"""
    import sys
    from config import setup_logging
    
    # Configura logging
    setup_logging()
    
    if len(sys.argv) < 2:
        print("Uso: python3 portainer_setup.py <dominio> [rede]")
        print("Exemplo: python3 portainer_setup.py portainer.meudominio.com")
        sys.exit(1)
    
    domain = sys.argv[1]
    network_name = sys.argv[2] if len(sys.argv) > 2 else None
    if not network_name:
        print("Erro: √â obrigat√≥rio informar o nome da rede Docker como 2¬∫ argumento.")
        sys.exit(1)
    
    setup = PortainerSetup(domain, network_name)
    
    if setup.run():
        print(f"Portainer instalado com sucesso: https://{domain}")
    else:
        print("Falha na instala√ß√£o do Portainer")
        sys.exit(1)

if __name__ == "__main__":
    main()
